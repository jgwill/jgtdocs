# JGT Platform Documentation Hub for LLMs

## Platform Overview

This repository serves as the central documentation hub for Jean Guillaume's Trading (JGT) platform - a comprehensive algorithmic trading system designed for autonomous signal detection, multi-timeframe analysis, and intelligent trade execution.

**CRITICAL**: Use actual JGT platform components, not external tools. The platform has sophisticated built-in capabilities.

## Core Platform Architecture

### üìä Data & Analytics Layer
- **jgtpy** - Market data services and core indicator calculations
- **jgtcore** - Shared libraries and core functionality

### ü§ñ Machine Learning & Signal Detection  
- **jgtml** - ML models, signal detection, and pattern intelligence
- **jgtapy** - Technical analysis indicators

### üîó Trading Execution & Connectivity
- **jgtfxcon** - FX connectivity and order management
- **jgtutils** - Platform utilities and configuration

### üß† Autonomous Trading Intelligence
- **jgtagentic** - Agentic trading orchestration and campaign management

## **LATEST: Unified Trading System (v0.0.336)**

### Trading Orchestrators
- **`trading_orchestrator.py`** - Comprehensive trading system management with real-time scheduling
- **`simple_trading_orchestrator.py`** - Streamlined orchestration for testing and single cycles
- **`observation_processor.py`** - Natural language market analysis integration

### Enhanced Scripts & Tools
- **`jgt_fdb_unified_scan.sh`** - Advanced market scanning with orchestrator integration
- **`unified_trading_loop.sh`** - Centralized trading operations with test mode
- **`jgt_background_trader.sh`** - Multi-timeframe background process management (m5, m15, H1)

## **CORRECT COMMAND PATTERNS**

### Market Data Pipeline
```bash
# Market Data (PDS) ‚Üí Technical Indicators (IDS) ‚Üí Chart Analysis (CDS)
jgtapp refresh-pds -i INSTRUMENT -t TIMEFRAME
jgtapp refresh-ids -i INSTRUMENT -t TIMEFRAME  
jgtapp refresh-cds -i INSTRUMENT -t TIMEFRAME
```

### **FDB Signal Detection (PRIMARY METHOD)**
```bash
# Correct FDB Scanner Usage
python -m jgtml.fdb_scanner_2408 -i INSTRUMENT -t TIMEFRAME -demo

# Enhanced FDB Scanner with Alligator Illusion Detection
jgtml enhancedfdbscan -i INSTRUMENT -t TIMEFRAME -demo
```

### Trading Orchestration
```bash
# Simple orchestrator for testing
python -m jgtml.simple_trading_orchestrator --demo --test

# Full orchestrator with scheduling
python -m jgtml.trading_orchestrator --instruments SPX500,EUR-USD --timeframes H4,D1
```

## Signal Detection System

### **FDB (Fractal Divergent Bar) Analysis**
- **Zone Patterns**: S=Sell, B=Buy, N=Neutral
- **Signal Types**: Entry signals, squat patterns, fade signals
- **Multi-timeframe validation** across H4/D1 timeframes

### **Current Market Analysis Capability**
- **Alligator Illusion Detection** - Enhanced pattern recognition
- **Five Dimensions Confluence** - Multi-indicator validation
- **Background Processing** - Continuous multi-timeframe scanning
- **Natural Language Analysis** - Observation processing for market context

## **AGENT PROTOCOLS**

### Memory Key Integration
```bash
# Retrieve cross-repository context before starting work
tushell scan-keys --pattern 'Workspace.jgwill.jgtml*' -S
tushell get-memory --key "<keyname>" --json
```

### Documentation Standards
- **Ledgers**: Create in `book/_/ledgers/` with timestamp format: `ledger_<topic>_<yyMMddHHmm>.md`
- **Timeline Tracking**: Use `bridge/<date>/` for chronological documentation
- **Narrative Mapping**: Update `narrative-map.md` with commit evolution

### **DO NOT CREATE EXTERNAL TOOLS**
- ‚ùå **WRONG**: Custom analysis scripts (e.g., `market_analysis.py`)
- ‚úÖ **CORRECT**: Use FDB scanner and orchestrators: `python -m jgtml.fdb_scanner_2408`

## Supported Markets & Timeframes

### Markets
- **Forex**: EUR-USD, AUD-USD, USD-CAD, XAU-USD
- **Indices**: SPX500, AUS200  
- **Commodities**: XAU-USD, precious metals

### Timeframes
- **Long-term**: M1 (Monthly), W1 (Weekly)
- **Medium-term**: D1 (Daily), H4, H8
- **Short-term**: H1, H2, H3
- **Intraday**: m15, m5, m1

## Current Development State

### **Production Ready**
- FDB signal detection system
- Multi-timeframe analysis
- Trading orchestration with scheduling
- Background process management

### **Active Development**  
- Pattern intelligence and signal quality prediction
- Campaign orchestration integration
- Enhanced natural language market analysis

### **Known Issues**
- CLI argument conflicts (resolved in latest versions)
- Environment setup requirements for `python-dateutil`
- JSON signal output formatting (signals detected but file formatting issues)

## **Platform Benefits**

### For Automated Trading
- **Systematic Signal Detection** - No manual chart analysis required
- **Multi-Market Coverage** - Simultaneous instrument analysis  
- **Risk Management** - Built-in position sizing and stop loss logic
- **Continuous Operation** - Background scanning and execution

### For Developers/Agents
- **Modular Architecture** - Clear component separation
- **Extensible Framework** - Add new indicators and signal types
- **Memory Integration** - Cross-repository context preservation
- **Complete Testing** - Demo modes and test capabilities

---

**REMEMBER**: Always use actual JGT platform tools (`python -m jgtml.fdb_scanner_2408`, orchestrators) rather than creating external analysis scripts. The platform has sophisticated built-in signal detection and analysis capabilities.

